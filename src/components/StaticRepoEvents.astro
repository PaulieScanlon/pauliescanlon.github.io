---
export interface Props {
  /** The GitHub user name */
  username: string;
    /** The GitHub repository name */
  repoName: string;
  /** The amount of results to display */
  results?: number;
}

const { username, repoName, results = 50 } = Astro.props;

  let repoData = null
  let eventsData = null

  try {
    const repoResponse = await fetch(
      'https://paulieapi.gatsbyjs.io/api/get-github-repo',
      {
        method: 'POST',
        body: JSON.stringify({
          owner: username,
          repo: repoName
        })
      }
    );

    repoData = await repoResponse.json();

    const eventsResponse = await fetch(
      'https://paulieapi.gatsbyjs.io/api/get-github-repo-events',
      {
        method: 'POST',
        body: JSON.stringify({
          owner: username,
          repo: repoName,
          results: results
        })
      }
    );

    eventsData = await eventsResponse.json();
  } catch (error) {
    throw new Error(error.message);
  }


import EventCard from './EventCard.tsx'
import { TerminalIcon } from '@heroicons/react/solid';
---


<section class={`bg-white rounded-lg shadow-lg p-6 mb-10 ${repoName}-bg`}>
  <div class="grid auto-1fr items-center gap-2 mb-6">
    <img
      src={repoData.repo.owner.avatar_url}
      alt={`${repoData.repo.owner.login}-profile-image`}
      class="w-12 h-12 sm:w-16 sm:h-16 rounded-full"
    />
    <div>
      <h2 class={`font-bold text-1xl sm:text-2xl ${repoName}-text`}>
        {repoData.repo.full_name}
      </h2>
      <p class={`text-gray-500 font-light ${repoName}-text`}>
        {repoData.repo.description}
      </p>
      <a
        href={repoData.repo.html_url}
        target="_blank"
        rel="noreferrer"
        class={`${repoName}-text`}
      >
          {repoData.repo.html_url}
      </a>
    </div>
  </div>
  <div class='grid auto-1fr'>
    <TerminalIcon className="h-5 w-5 text-white mt-0.5" />
    <h3 class="mb-4 pl-1"><b>Static Repo Events</b></h3>
  </div>
  <article class="bg-secondary rounded-lg shadow-inner py-0.5">
    <div class='grid gap-6 p-6 overflow-auto h-96'>
      {
        eventsData.events.map((event, index) => {
          const {type, actor,created_at,  repo, payload} = event
          return (
            <EventCard 
              key={index} 
              type={type} 
              date={created_at}
              login={actor.login}
              repo={repo} 
              commits={payload.commits}
            />
          )
        })
      }
    </div>
  </article>
</section>